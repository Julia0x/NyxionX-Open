buildscript {
    repositories {
        maven { url "https://maven.minecraftforge.net" }
        maven { url 'https://repo.spongepowered.org/maven'}
        mavenCentral()
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'org.spongepowered.mixin'

version = "1.8.9"
group = "me.nyxion"
archivesBaseName = "NyxionX"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false

    // Add this to properly configure Mixin
    clientJvmArgs += [
            '-Dfml.coreMods.load=me.nyxion.mixins.MixinLoader'
    ]
}

configurations {
    shade
    compile.extendsFrom(shade)
}

repositories {
    maven { url 'https://repo.spongepowered.org/maven/' }
    maven { url "https://repo1.maven.org/maven2/" }
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

def systemOs = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)

dependencies {
    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    // Add Trove dependency to shade configuration
    shade 'net.sf.trove4j:trove4j:3.0.3'

    // Add OptiFine dependency
    compile files('libs/OptiFine_1.8.9_HD_U_M5.jar')

    if (systemOs.contains("mac")) {
        compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
    }
    else if (systemOs.contains("linux")) {
        compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-babric.1'
        compile 'org.lwjgl.lwjgl:lwjgl:2.9.4-babric.1'
        compile 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-babric.1'
    }
}

if (systemOs.contains("mac")) {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
                substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
            }
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
} else if (systemOs.contains("linux")) {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209') using module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-babric.1')
                substitute module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209') using module('org.lwjgl.lwjgl:lwjgl:2.9.4-babric.1')
            }
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-babric.1'
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('net.sf.trove4j:trove4j:3.0.3'))
    }
    configurations = [project.configurations.shade]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    classifier ""
}

reobf {
    shadowJar {}
}

jar {
    manifest.attributes(
            "FMLCorePlugin" : "me.nyxion.mixins.MixinLoader",
            "ForceLoadAsMod": true,
            "TweakOrder": 0,
            "ModSide": "CLIENT",
            'FMLCorePluginContainsFMLMod': true,
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': 'mixins.nyxion.json'
    )
}

mixin {
    add sourceSets.main, "mixins.nyxion.refmap.json"
}

sourceSets {
    main {
        ext.refMap = "mixins.nyxion.refmap.json"
    }
}

task buildAndCopyToMods(type: Copy, dependsOn: 'build') {
    from "build/libs"
    into "<yourRealInstance>/.minecraft/mods"
    include "*.jar"
}

task buildCopyToRunModsAndRun(type: Copy, dependsOn: 'build') {
    from "build/libs"
    into "run/mods"
    include "*.jar"
}
buildCopyToRunModsAndRun.finalizedBy runClient